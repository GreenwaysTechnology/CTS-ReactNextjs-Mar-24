			 React/React.js
.....................................................................................

What is react?
 A JavaScript library for building user interfaces.

What is Angular?
  Angular is javascript framework for building user interfaces

What is Vue.js?
 Vue.js is javascript framework for building user interfaces

What is lib and framework?

 lib solves only one problem where as framework provides every thing end to end to build apps

Angular vs React:

1.Design pattern

 Angular uses traditional MVC design pattern 
 React uses "Flux" design pattern

2.Coding style
  
 Any User interface development frameworks provides 
  1.Markup  - html code,css
  2.Data   

Angular isloates 
  markup(html,css) into separate  called "templates"
  data into services(holding data and biz logic)

React isloates
  markup into js code
  data into js code- hooks,state  management libs like redux...
 React embeds every into javascript...

Programming files 
  Angular maintains lot of files, components,services,modules,directives,filters etc..which makes code base heavier

  React maintains very less code - components,statement management files,hooks...

Common things in both:

 Component driven, props
.....................................................................................
			DOM,VDOM
.....................................................................................

What is DOM?
   DOM is specification  released by W3c organgization,in order to build web apps for browsers.

in order to understand DOM fully , we need to understand HTML very deeply.

HTML:

1.HTML IS PL? - YES
2.HTML Is compiled -YES
3.HTML is excuted-YES

Hello.java --->compile--->Hello.class--->run----JVM(Runtime) executes code.

index.html
<html>
<head></head>
<title><title>
<body>
  <div>
     <h1>Welcome</h1>
  </div>
</body>
</html>
|
-------------------Browser
loader---LOAD Code into browser
 |
  from file: or http:
 |
Parser :
   Parser is special compiler which converts source into lexcial tree(string tree)

body
  div
     h1
        Welcome 
     h1
  div
body
 |
 Complier-Compilation : Convert this into assembly
|
body -load xxx
  div
     h1
        Welcome 
     h1
  div
body
.....................................................................................
				Runtime 
.....................................................................................
HTML Execution engine : Request Os ,to allocate memory :Runtime

-LinkedList
body -Node
  div -Node
     h1 -Node
        Welcome -Node
     h1
  div
body

|
 Linking the Nodes: Tree
body  -Node
  |
  div -Node
    |
     h1 -Node
      |
        Welcome -Node
        |
     h1
  div
 |
Layout/Paint Engine: will convert nodes into pxs : final output

..............................................................................................
Static web pages: htmls are displayed into browser.
..............................................................................................
In 1996,Netscap communication,Started an RND project called "How to manipulate the tree"

Tree is written in c language,then we need another c program to communicate.

But NETSCAP decided not to use C pl.

Netscap wanted to put java like implementation inside browser to manipulate "Tree".

that is birth of javascript.

How to access nodes from javascript engine?
  
One spec was published ,As per that spec
 "Document Object Model"
    -How to represent document(elements/nodes) in object oriented way.->DOM

 "Documents can be reprsented as Objects" : Object oriented Document Programming.

............................................................................................

How dom works?

index.html           Browser runtime(C program)         Javascript Engine
<h1>Hello</h1>       h1-Node                           h1- Object
			Hello-Node			 Hello Object Property



                 Every Html ELEMENT Inside Browser is "C Program"

	       Every Html ELEMENT javascript engine is "Object"


javascript developer ---->uses api --->to communicate Object---->js engine---->browser engine.	*************************************************************************************
Who and when "H1" object is created?

if you want to create object?

 class/ function

function Employee(){}  let emp = new Employee()


<h1> => function HTMLHeadingElement(){} => let h =new HTMLHeadingElement() ?

Note: For html elements, we cant create object directly, rather than JS Engine will create objects , return references to the developer to access.
 How via factory Objects: object helps to get other documents


Factory Object : HTML Document =>body

document.getElementById();
   |
Implicit object reference variable which points HTMLDocument OBject.
...................................................................................
What is our objective here? DOM Programming?
Enter into DOM programming:

1.write dom programming using javascript language.

<body>
  |
HTMLDocument : body : factory Object


Document apis:

Finding HTML Elements

HTMLElement document.getElementById(id)
      Find an element by element id
HTMLElement Document document.getElementsByTagName(name)
	Find elements by tag name
HTMLElement document.getElementsByClassName(name)
	Find elements by class name

HTMLElement document.querySelectory(selector) 
      find element/elements by selector


Changing HTML Elements : update existing element
......................
element.innerHTML =  new html content	Change the inner HTML of an element
element.attribute = new value	Change the attribute value of an HTML element
element.style.property = new style	Change the style of an HTML element
Method	Description
element.setAttribute(attribute, value)	Change the attribute value of an HTML element

Adding and Deleting Elements
document.createElement(element)	Create an HTML element
document.removeChild(element)	Remove an HTML element
document.appendChild(element)	Add an HTML element
document.replaceChild(new, old)	Replace an HTML element

////////////////////////////////////////////////////////////////////////////////////////////
DOM programming :

Create new Element:

1.create element
2.attach that element on existing tree. appendChild

function findElement() {
      //get the h1
      const element = document.getElementById('heading');
      console.dir(element);
      //get the content
      console.log(element.innerHTML);
}
findElement();

function updateElement() {
      const element = document.getElementById('heading');
      //element.innerText = 'Welcome to React' : Plain String
      element.innerHTML = 'Welcome to React!'; // which is node
}
updateElement()

function createElement() {
      const element = document.createElement('h2');
      element.innerHTML = 'Hey Buddy Are you new to DOM!';
      //attach that element
      document.body.appendChild(element);
}
createElement();

function applyStyle() {
      const element = document.getElementById('heading');
      //css property inside javascript
      element.style.backgroundColor = 'yellow'

}
applyStyle()

User interaction : Event Handling : UI events

Hardware events : mouse,keyboard,touch events
application events : onload,onupdate,offline,online........

How to add user interaction?

Every dom element has ability to subscribe events called dom events.

ways to attach events?

1.inline events
2.through coding

eventattachment has syntax

on+EventName = "callbackfunction /handler function"

Event Object : Object asscioated with every dom element.

 Which is proxy object between dom element and handler function.

if you want to access any dom element inside event handler, event object will help
event object is created and ready for use inside handler function arg.


 <h1 id="heading" onmouseout="applyMouseOut(event)" onmouseover="applyDynamicStyle(event)">Welcome to DOM</h1>

function applyDynamicStyle(e) {
      console.dir(e);
      const element = e.target;
      console.log(element);
      element.style.backgroundColor = 'green'

}

function applyMouseOut(e) {
      const element = e.target;
      element.style.backgroundColor = 'yellow'
}


<h1 id="heading">Welcome to DOM</h1>

function applyDynamicStyle(e) {
      console.dir(e);
      const element = e.target;
      console.log(element);
      element.style.backgroundColor = 'green'

}
function applyMouseOut(e) {
      const element = e.target;
      element.style.backgroundColor = 'yellow'
}

document.getElementById('heading').addEventListener('mouseover', applyDynamicStyle)

document.getElementById('heading').addEventListener('mouseout', applyMouseOut);
...................................................................................
javascript language can be used to manipulate web documents.

When we use javascript language directly , we face lot of problems

1.Complexity
2.Performance
3.No standard practice
..................................................................................
		Birth of Java script libs and frameworks
....................................................................................

In 2001,DOM Wrappers - libs /frameworks came into picture.
 DOJO
2005, JQuery

After 2006 , community people started introducing so many js frameworks and libs..

Most Popular libs and frameworks

1.JQuery
2.Angular.js
3.Dojo
4.Extjs
5.Angular
6.React
7.Vue js
etc.....

Architecture tech stack for dom programming


Plain JS
			 Application(dom) -plain js
			     |
			 Javascript Engine
			      |
			  Browser Engine

Framework/lib
			 Application(JQuery)
			     |
		       ---------------------------
			  JQuery Engine	------javascript programming		
                       -------------------------------
			      |
			 Javascript Engine
			      |
			  Browser Engine




Angular
			 Application(Angular)
			     |
		       ---------------------------
			  Angular Engine : Renderer(Ng2) Renderer2(Ng4,5),Ivy(6,7)		
                       -------------------------------
			      |
			 Javascript Engine
			      |
			  Browser Engine

React


		       Application(React)
			     |
		       ---------------------------
	             React Engine :React fiber-->React 16 on wards		
                       -------------------------------
			      |
			 Javascript Engine
			      |
			  Browser Engine
.....................................................................................

How react represents dom inside react engine?

Based on VDOM(Virtual DOM) specification...
	The virtual DOM (VDOM) is a programming concept where an ideal, or “virtual”, representation of a UI is kept in memory and synced with the “real” DOM by a library such as ReactDOM. This process is called reconciliation.

React is created by face book.

React was created not for others but created for face book one of the use case called "Buddylist" / chat application.

instagram web version was fully built by react.

React most implementations

1.flipkart ui is written react.
2.espn cric info
3.facebook use case chat , graph....
4.netflix
etc......

Where we can use React ? What type of application we can build using react.

Single Page web app...

Data intensive application // Data driven app
 where more data , which are chainging rapidly, where you want to update ui very faster with out ui flickering.

React can be used to build application for 

.........................................
1.browsers : Desktop
2.Mobile Apps : React Native

face book is working on many futures projects related to react

3.React VR : Virtual Reality.
4.React Car : For car applications
5.React TV (React Native)  : React for TV.
6.React IOT : any devices

We are going to learn react web for browsers.

React core modules:

react.js      => Core module
react-dom.js  => Browser
.....................................................................................				React and ui building
...................................................................................

React uses  a small programming language to describe UI called "JSX"

As we discussed React is used in many app dev like browser,mobile,tv apps.

Each app type(browser,mobile) has its own JSX syntax...

Browser jsx uses HTML as language
Mobile Jsx uses "Mobile markup" as language.

-----------------------------------------------------------------------------
 Markup layer             |  React Core Engine    | Render Engine   | Target
-----------------------------------------------------------------------------

HTML Markup---------------|  Object Tree(V.DOM)   | ReactDom.render |  Browser

Mobile Markup-------------|  Object Tree          |ReactNative.render| Mobile /Tabs

..............
VR Markup---------------  |  Object Tree          |VR.render         |VR devices

IOT Markup--------------- |  Object Tree          | IOT.render       |IOT Devices   
....................................................................................
Object Tree :

Note : in js every html element is object, in browser every element is node which forms tree

<div>
   <h1>
       hello
   </h1>
       |
       div
          |
          h1
            hello

         |
         divObject
		|
		H1 Object
			hello


		|
		React engine
		   |
.....................................................................................
			 React Project Setup
.....................................................................................
We are going to build single page web app.

React teams offers tool set to create react project.

create-react-app.

How to install tool?

There are two ways

1.using global module

npm install create-react-app  -g
2.using npx command
 npx create-react-app appName

Recommended is npx command.
G:\CTS>npx create-react-app welcome-app
Need to install the following packages:
create-react-app@5.0.1
Ok to proceed? (y) y
npm WARN deprecated tar@2.2.2: This version of tar is no longer supported, and will not receive security updates. Please upgrade asap.

Creating a new React app in G:\CTS\welcome-app.

Installing packages. This might take a couple of minutes.
Installing react, react-dom, and react-scripts with cra-template...


added 1490 packages in 2m

254 packages are looking for funding
  run `npm fund` for details

Initialized a git repository.

Installing template dependencies using npm...

added 69 packages, and changed 1 package in 16s

258 packages are looking for funding
  run `npm fund` for details
Removing template package using npm...


removed 1 package, and audited 1559 packages in 4s

258 packages are looking for funding
  run `npm fund` for details

8 vulnerabilities (2 moderate, 6 high)

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.

Created git commit.

Success! Created welcome-app at G:\CTS\welcome-app
Inside that directory, you can run several commands:

  npm start
    Starts the development server.

  npm run build
    Bundles the app into static files for production.

  npm test
    Starts the test runner.

  npm run eject
    Removes this tool and copies build dependencies, configuration files
    and scripts into the app directory. If you do this, you can’t go back!

We suggest that you begin by typing:

  cd welcome-app
  npm start

Happy hacking!

....................................................................................
			Exploring structure of the project

package.json
{
  "name": "welcome-app",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-scripts": "5.0.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}


public/index.html
 
This is landing page for any single page app.

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root">
      

    </div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>


src
  folder contains source code of app.

src/index.js
 It is entry file for app
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
...................................................................................
			   DOM programming using plain js
...................................................................................

//dom element using java script

function createHeadElement() {
    console.log('dom  is being initalized')
    //create Element
    const divElement = document.getElementById('root')
    element.innerHTML = 'Hello React!'
    divElement.appendChild(element)
}
createHeadElement();

...................................................................................
			   DOM Programming using React
...................................................................................

//dom element creation using React.

import ReactDOM from 'react-dom/client';

const Heading = <h1>Hello React!!!</h1>

const rootElement =  document.getElementById('root')
const root = ReactDOM.createRoot(rootElement);
root.render(Heading)

.....................................................................................
	JSX - java script and XML - langugage to create User interfaces
.....................................................................................

React uses declarative dom programing using a mini language invented by facebook : JSX

JSX : - javascript xml

 1.PL language built by face book to write user interfaces.
 2.JSX is collection of html markup and javascript.
 3.JSX is dsl and declarative.
 4.Every device has its own jsx language syntax.
 5.Browsers jsx can't be used for building mobile application.


Since jsx  is a language cant be executed on browser /mobile directly.
..................................................................................
JSX compilation model:

                   layout.js / layout.jsx
		       |
		    compiler - babel.js 
			|
		    plain js code
			|-----------------------Dev cycle
	----------------------------------------- -- Excution cycles Starts
  Runtime : React Engine  compiled code feed into react engine
			|
		     Excute compiled js code : function calls
			|
	     create virtual Object tree (in browser V-dom)
		        |
		     Render Engine ; will convert react object tree into js dom object tree
			|
		   Flush the tree into target
			|
	--------------------------------------------
        |
     Browser


JSX is used to create dom elements.

Every DOM element is object.

What is Component ?
  Component is Object , Coined by MS in 1989.

According to ms, Component is object which has state(date),behaviour(methods) + User interface(Visual).
 eg:Button,TextBox,Grid,Menu,MenuBar,Layout,Table.....

Like Object tree(DOM Tree), In React we can create "Component" Tree.


      Node===DOM Object====Component
       h1     HTMLHeading   Heading

"React apps are made out of components. A Component is piece of the UI that has its own logic and appearance, A Component can be small as a button or as large as an entire Page"
.....................................................................................
In coding 

Threre two libs 
1.react.js  => to create component and manages all features related component.
2.react-dom => Render engine.

react.js

1.React
  It top level class which provides all apis to create,delete,update components.


react-dom.js

2.ReactDOM
   It is top level class which provides api to flush the v.dom into real dom.
..................................................................................
			Component Creational patterns
...................................................................................


1.variable pattern
2.functional pattern
3.es 6 class pattern

Components can be created any one or mixed way  style.
"functional Pattern" is more popular and recommended pattern....

Eg:
Variable Pattern:
import ReactDOM from 'react-dom/client';

//variable Pattern
//Heading is variable <h1>Hello</h1> is comonent
const Heading = <h1>Hello React!!!</h1>

const rootElement =  document.getElementById('root')
const root = ReactDOM.createRoot(rootElement);
root.render(Heading)

2.functional pattern:
import ReactDOM from 'react-dom/client';


//create a component : using es 5 function
// function Heading() {
//     //return jsx 
//     return <h1>
//         Hello Functional React!
//     </h1>
// }
//arrow function
// const Heading = () => {
//     return <h1>Hello</h1>
// }
const Heading = () => <h1>Hello</h1>


const root = ReactDOM.createRoot(document.getElementById('root'));

// root.render(Heading())
root.render(<Heading></Heading>)
....................................................................................
			 class components
...................................................................................
	
import ReactDOM from 'react-dom/client';
import React from 'react';

class Heading extends React.Component {

    render() {
        return <div>
            <h1>Hello React</h1>
        </div>
    }
}

const root = ReactDOM.createRoot(document.getElementById('root'));

root.render(<Heading></Heading>)
.....................................................................................
			Exploring JSX
.....................................................................................

JS-Javascript
X -  XML

Since HTML parser is weak, but when y write react code, we need consistent code generation.

So that react team, developed compiler follows basic xml rules.


Basic XML  rules:

1.every opened element must be closed
  <h1>Hello</h1>
  <Welcome></Welcome>
 some elements may not have closing tag
  <img /> : image element has no child elements : self closing. 

2. In xml you must have one single root element.
  all elements must be organized under single root element.

 <h1>Welcome to React</h1>
 <p>Path finder</p>

In html what can be root element
 <div>,<span>,all html 5 layout elements header,footer,section,aside...

			
const Welcome = ()=>{
    return <div>
        <h1>Hello
    </div>
}
This code will throw error.

Self closing:
import ReactDOM from 'react-dom/client';
import logo from './logo.svg';

//must have closing tag
// const Welcome = ()=>{
//     return <div>
//         <h1>Hello
//     </div>
// }
const Welcome = () => {
    return <div>
        <img src={logo} className="App-logo" alt="logo" />
    </div>
}

const root = ReactDOM.createRoot(document.getElementById('root'));

// root.render(<Welcome></Welcome>)
root.render(<Welcome/>)
.....................................................................................

Root Element:

import ReactDOM from 'react-dom/client';
import logo from './logo.svg';

const Welcome = () => {
    return <div>
        <h1>Site Heading</h1>
        <p>This is react</p>
    </div>
}


const root = ReactDOM.createRoot(document.getElementById('root'));

root.render(<Welcome />)
.....................................................................................
			  Fragments
....................................................................................

Fragements are used to wrap elements invisible way.

Suppose if i dont want any root element, then we can use Fragement.

Fragements are used to escape from compiler.

Syntax:

 <React.Fragment>

 </React.Fragement>


 <Fragment>

 </Fragement>


 <>

 </>
import ReactDOM from 'react-dom/client';
// import React, { Fragment } from 'react';

// const Welcome = () => {
//     return <React.Fragment>
//         <h1>Site Heading</h1>
//         <p>This is react</p>
//     </React.Fragment>
// }

// const Welcome = () => {
//     return <Fragment>
//         <h1>Site Heading</h1>
//         <p>This is react</p>
//     </Fragment>
// }

const Welcome = () => {
    return <>
        <h1>Site Heading</h1>
        <p>This is react</p>
    </>
}

const root = ReactDOM.createRoot(document.getElementById('root'));

root.render(<Welcome />)
.....................................................................................
			Component Compostition
....................................................................................

How to create component?
You have to think how to break components as simple as possible...


//component compostion
import ReactDOM from 'react-dom/client';

const Hello = () => <>
    <h1>Hello</h1>
</>
const Hai = () => <>
    <h1>Hai</h1>
</>
const Greeter = () => <>
    <h1>Greeter</h1>
</>

const Welcome = () => {
    return <div>
        <Hello />
        <Hai />
        <Greeter />
    </div>
}
const App = ()=><Welcome/>

const root = ReactDOM.createRoot(document.getElementById('root'));

root.render(<App />)
.....................................................................................
			 React Dev tool
.....................................................................................

It is tool part of browser as plugin, used to insepect the structure of app.
https://react.dev/learn/react-developer-tools

.....................................................................................
		  Component Composition and Modularity
.....................................................................................
Every Component will go into separate folders and files, through es 6 modules you can import export components..

https://legacy.reactjs.org/docs/faq-structure.html

Is there a recommended way to structure React projects?

React doesn’t have opinions on how you put files into folders. That said there are a few common approaches popular in the ecosystem you may want to consider.

Grouping by features or routes

common/
  Avatar.js
  Avatar.css
  APIUtils.js
  APIUtils.test.js
feed/
  index.js
  Feed.js
  Feed.css
  FeedStory.js
  FeedStory.test.js
  FeedAPI.js
profile/
  index.js
  Profile.js
  ProfileHeader.js
  ProfileHeader.css
  ProfileAPI.js

Grouping by file type
api/
  APIUtils.js
  APIUtils.test.js
  ProfileAPI.js
  UserAPI.js
components/
  Avatar.js
  Avatar.css
  Feed.js
  Feed.css
  FeedStory.js
  FeedStory.test.js
  Profile.js
  ProfileHeader.js
  ProfileHeader.css

Component File Naming Convention:

FileName Must start with Capital letter.

Feed.js

File Extension would be ".js or .jsx" - recommended is ".jsx"

src/welcome/Hello.jsx
const Hello = () => <>
    <h1>Hello</h1>
</>

export { Hello }

src/welcome/Hai.jsx

const Hai = () => <>
    <h1>Hai</h1>
</>

export { Hai }


export { Welcome }
src/welcome/Greeter.jsx

const Greeter = () => <>
    <h1>Greeter</h1>
</>

export { Greeter }

src/welcome/Welcome.jsx
import { Hello } from "./Hello"
import { Hai } from "./Hai"
import { Greeter } from "./Greeter"

const Welcome = () => {
    return <div>
        <Hello />
        <Hai />
        <Greeter />
    </div>
}

src/welcome/index.js

//component compostion
import ReactDOM from 'react-dom/client';
import { Welcome } from './welcome/Welcome';



const App = ()=><Welcome/>

const root = ReactDOM.createRoot(document.getElementById('root'));

root.render(<App />)
...................................................................................
			Barrel Export
..................................................................................

src/welcome/
   Hello.jsx
   Hai.jsx
   Welcome.jsx

when you import these files where ever, we have to import 

import { Hello } from "./Hello"
import { Hai } from "./Hai"
import { Greeter } from "./Greeter"
import { Welcome } from './welcome/Welcome';

Barrel export is nothing simplifiying export and import...
src/welcome/
   Hello.jsx
   Hai.jsx
   Welcome.jsx
   index.js

src/welcome/index.js
you have to write reexport code
import { Hai } from './Hai'
import { Hello } from './Hello'
import { Welcome } from './Welcome'
import { Greeter } from './Greeter'

//re export 
export { Hai, Hello, Welcome, Greeter }


eg:

//component compostion
import ReactDOM from 'react-dom/client';
// import { Welcome } from './welcome/Welcome';
import { Welcome } from './welcome'

const App = () => <Welcome />

const root = ReactDOM.createRoot(document.getElementById('root'));

root.render(<App />)

Assigment:

You have to build layout

 -App
   |
   RootLayout
	|
	Page
	  |
	 Header
	 Main	   
	   |
	    Three sections	 
	 Footer


Component Name:
  const user = () => <h1>User Component</h1>

const App = () => (
    <>
        <Welcome />
        <user />
    </>
)

Warning: The tag <user> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.
    at user
    at App
.....................................................................................
			   Data Binding
....................................................................................

As of now we have seen only how to create static UI - (only HTML)

How to represent data?
->primitives - string,numbers,boolean
->objects - object,arrays

How to bind data?
  {variable} {expression}
 
  {a} {fun()} {10*2} {isHidden ? 'Show':'Hide'} 


Simple Data binding:
import ReactDOM from 'react-dom/client';

const User = () => {
    const userName = 'Subramanian Murugan'
    const mail = 'sasubramanian_md@hotmail.com'
    const status = false
    const id = 1
    const imageSrc='https://i.imgur.com/7vQD0fPs.jpg'

    return <div>
        <img src={imageSrc} height={50} width={50} />
        <h1>Id {id}</h1>
        <p>Name {userName}</p>
        <p>Mail {mail}</p>
        <p>Status {status ? 'Available' : 'Not Available'}</p>
    </div>
}

const App = () => <>
    <User />
</>

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />
);
..................................................................................
			   Data Binding Patterns

1.property binding aka props pattern
2.State binding aka state pattern.

props Pattern:

When you think about component , you should thing about resuablity..


const User = () => {
    const userName = 'Subramanian Murugan'
    const mail = 'sasubramanian_md@hotmail.com'
    const status = false
    const id = 1
    const imageSrc='https://i.imgur.com/7vQD0fPs.jpg'

    return <div>
        <img src={imageSrc} height={50} width={50} />
        <h1>Id {id}</h1>
        <p>Name {userName}</p>
        <p>Mail {mail}</p>
        <p>Status {status ? 'Available' : 'Not Available'}</p>
    </div>
}

User component is not resuable, we cant represent other user information...

How to create resuable component?

 Component must be paramertized or configurable....

You know very well component is function, just js function, when you think about function, you can pass parameter....

eG:
import ReactDOM from 'react-dom/client';

const User = (userName, mail, status, id, imageSrc) => {
    return <div>
        <img src={imageSrc} height={50} width={50} />
        <h1>Id {id}</h1>
        <p>Name {userName}</p>
        <p>Mail {mail}</p>
        <p>Status {status ? 'Available' : 'Not Available'}</p>
    </div>
}

const App = () => {
    const userName = 'Subramanian Murugan'
    const mail = 'sasubramanian_md@hotmail.com'
    const status = false
    const id = 1
    const imageSrc = 'https://i.imgur.com/7vQD0fPs.jpg'

    return User(userName, mail, status, id, imageSrc)
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />
);


Here we call function,and passing values as parameter.
Calling function is imperative style programming, but react recommends to use declarative programming meaning that html like syntax.


import ReactDOM from 'react-dom/client';

const User = (props) => {
    console.log(props)
    return <div>
        <img src={props.imageSrc} height={50} width={50} />
        <h1>Id {props.id}</h1>
        <p>Name {props.userName}</p>
        <p>Mail {props.mail}</p>
        <p>Status {props.status ? 'Available' : 'Not Available'}</p>
    </div>
}

const App = () => {
    const userName = 'Subramanian Murugan'
    const mail = 'sasubramanian_md@hotmail.com'
    const status = false
    const id = 1
    const imageSrc = 'https://i.imgur.com/7vQD0fPs.jpg'

    return <>
        <User id={id} mail={mail} userName={userName} status={status} imageSrc={imageSrc} />
        <User id={2} mail={'murugan@gmail.com'} userName={'murugan'} status={true} imageSrc={imageSrc} />
        <User id={3} mail={'ram@gmail.com'} userName={'ram'} status={false} imageSrc={imageSrc} />
        <User id={4} mail={'sweety@hotmail.com'} userName={'Sweety'} status={false} imageSrc={imageSrc} />
    </>
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />
);

.................................................................................
			Component break up and property
...................................................................................
import ReactDOM from 'react-dom/client';

export const Avatar = props => <img src={props.imageSrc} height={50} width={50} />
export const Status = props => <p>Status {props.status ? 'Available' : 'Not Available'}</p>

export const User = (props) => {
    return <div>
        <Avatar imageSrc={props.imageSrc} />
        <h1>Id {props.id}</h1>
        <p>Name {props.userName}</p>
        <p>Mail {props.mail}</p>
        <Status status={props.status} />
    </div>
}

export const App = () => {
    const userName = 'Subramanian Murugan'
    const mail = 'sasubramanian_md@hotmail.com'
    const status = false
    const id = 1
    const imageSrc = 'https://i.imgur.com/7vQD0fPs.jpg'

    return <>
        <User id={id} mail={mail} userName={userName} status={status} imageSrc={imageSrc} />
        <User id={2} mail={'murugan@gmail.com'} userName='murugan' status={true} imageSrc={imageSrc} />
        <User id={3} mail={'ram@gmail.com'} userName='ram' status={false} imageSrc={imageSrc} />
        <User id={4} mail={'sweety@hotmail.com'} userName={'Sweety'} status={false} imageSrc={imageSrc} />
    </>
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />
);
...................................................................................
		    Object Destructuring and Props
....................................................................................
import ReactDOM from 'react-dom/client';

export const Avatar = ({ imageSrc }) => <img src={imageSrc} height={50} width={50} />
export const Status = ({ status }) => <p>Status {status ? 'Available' : 'Not Available'}</p>

export const User = (props) => {
    //introduce object destrucing 
    const { id, userName, status, mail, imageSrc } = props
    return <div>
        <Avatar imageSrc={imageSrc} />
        <h1>Id {id}</h1>
        <p>Name {userName}</p>
        <p>Mail {mail}</p>
        <Status status={status} />
    </div>
}

export const App = () => {
    const userName = 'Subramanian Murugan'
    const mail = 'sasubramanian_md@hotmail.com'
    const status = false
    const id = 1
    const imageSrc = 'https://i.imgur.com/7vQD0fPs.jpg'

    return <>
        <User id={id} mail={mail} userName={userName} status={status} imageSrc={imageSrc} />
        <User id={2} mail={'murugan@gmail.com'} userName='murugan' status={true} imageSrc={imageSrc} />
        <User id={3} mail={'ram@gmail.com'} userName='ram' status={false} imageSrc={imageSrc} />
        <User id={4} mail={'sweety@hotmail.com'} userName={'Sweety'} status={false} imageSrc={imageSrc} />
    </>
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />
);

..................................................................................
			 Property Rethrow
.................................................................................

Before property Rethrow:

export const User = (props) => {
    return <UserDetails
        id={props.id}
        userName={props.userName}
        status={props.status}
        mail={props.mail}
        imageSrc={props.imageSrc}
    />
}
Here component passes every data down to its children, these more complex, react provides short cut using spread operator..

import ReactDOM from 'react-dom/client';

export const Avatar = ({ imageSrc }) => <img src={imageSrc} height={50} width={50} />
export const Status = ({ status }) => <p>Status {status ? 'Available' : 'Not Available'}</p>

export const User = (props) => {
    // return <UserDetails
    //     id={props.id}
    //     userName={props.userName}
    //     status={props.status}
    //     mail={props.mail}
    //     imageSrc={props.imageSrc}
    // />
    return <UserDetails {...props} extra={{ address: 'Banaglore' }} />
}
export const UserDetails = props => {
    //introduce object destrucing 
    const { id, userName, status, mail, imageSrc, extra } = props
    return <div>
        <Avatar imageSrc={imageSrc} />
        <h1>Id {id}</h1>
        <p>Name {userName} -  extra</p>
        <p>Mail {mail}</p>
        <p>{extra.address}</p>
        <Status status={status} />
    </div>
}

export const App = () => {
    const userName = 'Subramanian Murugan'
    const mail = 'sasubramanian_md@hotmail.com'
    const status = false
    const id = 1
    const imageSrc = 'https://i.imgur.com/7vQD0fPs.jpg'

    return <>
        <User id={id} mail={mail} userName={userName} status={status} imageSrc={imageSrc} />
        <User id={2} mail={'murugan@gmail.com'} userName='murugan' status={true} imageSrc={imageSrc} />
        <User id={3} mail={'ram@gmail.com'} userName='ram' status={false} imageSrc={imageSrc} />
        <User id={4} mail={'sweety@hotmail.com'} userName={'Sweety'} status={false} imageSrc={imageSrc} />
    </>
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />
);

Assigment:
.........
You have to build Grid Component

GridComponent
   |
   Column
     |
     x y z
   Row
    Row of data

You must apply props pattern,Fragments...
.....................................................................................
				Default Props
.....................................................................................
import ReactDOM from 'react-dom/client';

const User = (props) => {
    return <div>
        <img src={props.imageSrc} alt='No Image' height={50} width={50} />
        <h1>Id {props.id}</h1>
        <p>Name {props.userName}</p>
        <p>Mail {props.mail}</p>
        <p>Status {props.status ? 'Available' : 'Not Available'}</p>
    </div>
}
//default Props
User.defaultProps = {
    id: 0,
    userName: 'User Name',
    mail: 'Mail',
    status: false
}

const App = () => {
    const userName = 'Subramanian Murugan'
    const mail = 'sasubramanian_md@hotmail.com'
    const status = false
    const id = 1
    const imageSrc = 'https://i.imgur.com/7vQD0fPs.jpg'

    return <>
        <User />
        <User id={id} mail={mail} userName={userName} status={status} imageSrc={imageSrc} />
        <User id={2} mail={'murugan@gmail.com'} userName={'murugan'} status={true} imageSrc={imageSrc} />
        <User id={3} mail={'ram@gmail.com'} userName={'ram'} status={false} imageSrc={imageSrc} />
        <User id={4} mail={'sweety@hotmail.com'} userName={'Sweety'} status={false} imageSrc={imageSrc} />
    </>
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />
);
.....................................................................................	
				Styling
.....................................................................................

React uses two types of styling

1.css classes
2.css style - inline styles

You can use any css framework for styling.
Even you can write your own css also...

React html attribute syntax:
............................

<div class="class">

</div>

class is html attribute.

In React we cant add html attributes directly, we need to follow jsx notation/naming starndard - camelCase


<div className="class">

</div>
HTML ATTRIBUTES
accept acceptCharset accessKey action allowFullScreen alt async autoComplete
autoFocus autoPlay capture cellPadding cellSpacing challenge charSet checked
cite classID className colSpan cols content contentEditable contextMenu controls
controlsList coords crossOrigin data dateTime default defer dir disabled
download draggable encType form formAction formEncType formMethod formNoValidate
formTarget frameBorder headers height hidden high href hrefLang htmlFor
httpEquiv icon id inputMode integrity is keyParams keyType kind label lang list
loop low manifest marginHeight marginWidth max maxLength media mediaGroup method
min minLength multiple muted name noValidate nonce open optimum pattern
placeholder poster preload profile radioGroup readOnly rel required reversed
role rowSpan rows sandbox scope scoped scrolling seamless selected shape size
sizes span spellCheck src srcDoc srcLang srcSet start step style summary
tabIndex target title type useMap value width wmode wrap
onClick

import ReactDOM from 'react-dom/client';
// import './index.css';
// import './App.css';
import 'bootstrap/dist/css/bootstrap.css'


export const Avatar = ({ imageSrc }) => <img src={imageSrc} height={50} width={50} />
export const Status = ({ status }) => <p>Status {status ? 'Available' : 'Not Available'}</p>

export const User = (props) => {
    //introduce object destrucing 
    const { id, userName, status, mail, imageSrc } = props
    return <div className="container">
        <Avatar imageSrc={imageSrc} />
        <h1>Id {id}</h1>
        <p>Name {userName}</p>
        <p>Mail {mail}</p>
        <Status status={status} />
    </div>
}

export const App = () => {
    const userName = 'Subramanian Murugan'
    const mail = 'sasubramanian_md@hotmail.com'
    const status = false
    const id = 1
    const imageSrc = 'https://i.imgur.com/7vQD0fPs.jpg'

    return <>
        <User id={id} mail={mail} userName={userName} status={status} imageSrc={imageSrc} />
        <User id={2} mail={'murugan@gmail.com'} userName='murugan' status={true} imageSrc={imageSrc} />
        <User id={3} mail={'ram@gmail.com'} userName='ram' status={false} imageSrc={imageSrc} />
        <User id={4} mail={'sweety@hotmail.com'} userName={'Sweety'} status={false} imageSrc={imageSrc} />
    </>
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />
);

Global Sytles
index.js
 import './global.css'

src/dashboard/dashoard.css
....................................................................................
			  In Styling
....................................................................................

HTML
<h1 style="color:red;">Hello</h1>

In React:

const theme = { 
  color:'red'
}
<h1 style={theme}>Hello</h1>

<h1 style={{color:'red'}}>Hello</h1>
import ReactDOM from 'react-dom/client';
// import './index.css';
// import './App.css';
import 'bootstrap/dist/css/bootstrap.css'


export const Avatar = ({ imageSrc }) => <img src={imageSrc} height={50} width={50} />
export const Status = ({ status }) => <p>Status {status ? 'Available' : 'Not Available'}</p>

export const User = (props) => {
    //introduce object destrucing 
    const { id, userName, status, mail, imageSrc } = props
    return <div className="container">
        <Avatar imageSrc={imageSrc} />
        <h1 style={{color:'red'}}>Id {id}</h1>
        <p>Name {userName}</p>
        <p>Mail {mail}</p>
        <Status status={status} />
    </div>
}

export const App = () => {
    const userName = 'Subramanian Murugan'
    const mail = 'sasubramanian_md@hotmail.com'
    const status = false
    const id = 1
    const imageSrc = 'https://i.imgur.com/7vQD0fPs.jpg'

    return <>
        <User id={id} mail={mail} userName={userName} status={status} imageSrc={imageSrc} />
        <User id={2} mail={'murugan@gmail.com'} userName='murugan' status={true} imageSrc={imageSrc} />
        <User id={3} mail={'ram@gmail.com'} userName='ram' status={false} imageSrc={imageSrc} />
        <User id={4} mail={'sweety@hotmail.com'} userName={'Sweety'} status={false} imageSrc={imageSrc} />
    </>
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />
);
.....................................................................................
			   List Rendering
....................................................................................

In any ui application list plays vital role.

Using List we can build different types of layouts.

1.List view  - ul,li
2.Grid View  - table, tr,td
3.Card View  - div,section,header

import ReactDOM from 'react-dom/client';

//simple data set
const List = ({ data }) => {
  return <>
    <h1> Family List</h1>
    <ul>
      {
        data.map(name => {
          return <li>{name}</li>
        })
      }
    </ul>
  </>
}

export const App = () => {
  const names = ['Subramanian', "Murugan", "Geetha", "Dhviyasree", "Shirisha"]
  return <>
    <List data={names} />
  </>
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />
);
..................................................................................
			 Object List
.................................................................................
import ReactDOM from 'react-dom/client';
import { POSTS } from './mock-data/posts'

//simple data set
const PostList = ({ data }) => {
    return <>
        <h1> </h1>
        <ul>
            {
                data.map(post => {
                    return <li>{post.title}</li>
                })
            }
        </ul>
    </>
}

export const App = () => {
    return <>
        <PostList data={POSTS} />
    </>
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />
);
....................................................................................
			 key-prop
....................................................................................

key prop is built in react prop ,used by react engine to optimize the list rendering..

react-jsx-dev-runtime.development.js:87 Warning: Each child in a list should have a unique "key" prop.

      <ul>
            {
                data.map(post => {
                    return <li key={post.id}>{post.title}</li>
                })
            }
        </ul>
....................................................................................
			List and component break up
....................................................................................
import ReactDOM from 'react-dom/client';
import { POSTS } from './mock-data/posts'

//simple data set
const PostList = ({ data }) => {
    return <>
        <List data={data} />
    </>
}
// const List = (props) => {
//     return <ul>
//         {
//             props.data.map(post => {
//                 return <ListItem post={post} />
//             })
//         }
//     </ul>
// }
const List = (props) => <ul>{
    props.data.map(post => <ListItem post={post} />)
}</ul>

const ListItem = props => <li key={props.post.id}>{props.post.title}</li>

export const App = () => {
    return <>
        <PostList data={POSTS} />
    </>
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />
);
....................................................................................
			Conditional Rendering
....................................................................................
How to introduce if ...else and also tenary operator in jsx?

Your components will often need to display different things depending on different conditions.

In React, you can conditionally render jsx using javascript syntax like if statement ,&& and ?: operator..

Returning different JSX(Component) depending on condition.
import ReactDOM from 'react-dom/client';

const todoList = [{
    id: 1,
    name: 'learn react',
    status: true
},
{
    id: 2,
    name: 'Learn next',
    status: false
},
{
    id: 3,
    name: 'learn es',
    status: true
},
{
    id: 4,
    name: 'learn Angular',
    status: true
}

]

// const Item = props => {
//     const { name, status } = props.todo
//     // if (status) {
//     //     //render 
//     //     return <li>{name} ✔</li>
//     // } else {
//     //     return <li>{name}</li>
//     // }
//     return <li>
//             {status ? `${name} ✔` : name}
//         </li>
// }

const Item = ({ todo: { name, status } }) => <li>
    {status ? `${name} ✔` : name}
</li>
const TodoList = props => {
    return <>
        <ul>
            {
                props.todos.map(todo => {
                    return <>
                        <Item todo={todo} />
                    </>
                })
            }
        </ul>
    </>
}


export const App = () => {
    return <>
        <TodoList todos={todoList} />
    </>
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />
);
...................................................................................
			   State Pattern
		       (Dynamic User Interface)
			 (Event Handling)
....................................................................................

What is state?
  State is another way of representing data in React.

As of we have seen data is not changing or updating...

How to introduce State?

There are two ways

1.class pattern 
   It is legacy way of representing state and Managining state
   It is not recommended..

2.Function pattern
    It is modern way of representing state
    State is represented via "Hook".


1.class pattern 

Declare class:
import React from 'react';
import ReactDOM from 'react-dom';


class Review extends React.Component {

    render() {
        return <div>
            <h1>Review Component</h1>
        </div>
    }
}


const App = () => {
    return <>
        <Review></Review>
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />
);

Declare data:

React.Component is super class , which is having properites and methods

Methods:

1.lifecycle methods
2.setState
3.forceUpdate()

Instance Properties

1.state
2.props

state default value is null, that means we need to initalize state variable with data.

import React from 'react';
import ReactDOM from 'react-dom/client';


class Review extends React.Component {

    render() {
        console.log(this.state)
        return <div>
            <h1>Review Component</h1>
        </div>
    }
}


const App = () => {
    return <>
        <Review></Review>
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />
);

here out put would be "null"

...

How to declare state?
import React from 'react';
import ReactDOM from 'react-dom/client';


class Review extends React.Component {

    //state declaration
    state = {
        //application data/ui data
        like: 0
    }

    render() {
        console.log(this.state)
        return <div>
            <h1>Review Component</h1>
        </div>
    }
}


const App = () => {
    return <>
        <Review></Review>
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />
);
..............
How to bind state in UI, what is initial state.

Initial state means, the state(data) is associated with UI during first rendering.

import React from 'react';
import ReactDOM from 'react-dom/client';


class Review extends React.Component {

    //state declaration
    state = {
        //application data/ui data
        like: 10
    }

    render() {
        console.log(this.state)
        return <div>
            <h1>Review Component</h1>
            <h5>Like {this.state.like}</h5>
        </div>
    }
}


const App = () => {
    return <>
        <Review></Review>
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />
);
....................................................................................
			  Event Handler
....................................................................................
import React from 'react';
import ReactDOM from 'react-dom/client';


class Review extends React.Component {

    //state declaration
    state = {
        //application data/ui data
        like: 10
    }
    //listener: arrow function
    onLike = () => {
        console.log('like')
    }
    render() {
        console.log(this.state)
        return <div>
            <h1>Review Component</h1>
            <h5>Like {this.state.like}</h5>
            <button onClick={this.onLike}>😁</button>
        </div>
    }
}


const App = () => {
    return <>
        <Review></Review>
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />
);
...................................................................................
			 State Mutation
..................................................................................

How Component can change the data?

-Via State

How state can be changed

-Via Events


import React from 'react';
import ReactDOM from 'react-dom/client';


class Review extends React.Component {

    //state declaration
    state = {
        //application data/ui data
        like: 10
    }
    //listener: arrow function
    onLike = () => {
        this.state.like++
        console.log('inside listener', this.state)
    }
    render() {
        console.log('inside render', this.state)
        return <div>
            <h1>Review Component</h1>
            <h5>Like {this.state.like}</h5>
            <button onClick={this.onLike}>😁</button>
        </div>
    }
}


const App = () => {
    return <>
        <Review></Review>
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />
);

In the above we have incremented, like inside listener, but no update in UI

Why?
  
  UI logic is written inside render function,
  When ever like is changed, we need to call render function, so that ui could be updated with new like data.

How to call render?
import React from 'react';
import ReactDOM from 'react-dom/client';


class Review extends React.Component {

    //state declaration
    state = {
        //application data/ui data
        like: 10
    }
    //listener: arrow function
    onLike = () => {
        this.state.like++
        console.log('inside listener', this.state)
        //calling render
        this.render()
    }
    render() {
        console.log('inside render', this.state)
        return <div>
            <h1>Review Component</h1>
            <h5>Like {this.state.like}</h5>
            <button onClick={this.onLike}>😁</button>
        </div>
    }
}


const App = () => {
    return <>
        <Review></Review>
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />
);

You can notice in the above, we have called render inside listener, render is called but no UI update.

Why?

Can we call render method directly inside event listener...
Yes, but no impact on ui update...
   onLike = () => {
        this.state.like++
        console.log(this.state.like)
        this.render()
        console.log('onLike is clicked')
    }
Note: render should be not called directly in order to update user interface..
.................................................................................
		Before writing code, we need to learn the concept
....................................................................................
			Functional Programming principles
....................................................................................
Programming paradigms:
 any programming language is built on the top programming paradigms
 Collections of set of principles and concepts.

Most popular programming paradigms.
1.Object oriented
   C++,java,C#......
2.Procedural oriented
   C
3.Functional Programming 
   LISP,Clojure,scheme,js

Some languages follow multiple paradigms (hybrid) , some follow single paradigm (solo)

javascript is object based, functional style programming language.
java is object oriented,functional style programming...

What is functional programming?

  It is type of programming paradigm.

functional programming is the first programming paradagim introduced in 1935, as part of Mathmetics called "Lambda Calculs".

The first functional programming language called "LISP" was created in 1955.

React uses fp principles:

1.Pure functions
2.Immuablity


Pure Functions:

Pure functions are defined by two rules..

Rule A:
  if function receives input, the function returns the input without any mutation...


//is this function is pure function or not: Pure
function Hello(message) {
    return message;
}
console.log(Hello('hello'))

//is this function is pure function or not: Impure function.
//The function modifies the input parameter
function Hai(message) {
    return message.toUpperCase();
}
console.log(Hai('hai'))

Are we applying pure function rule a in React?

Yes,With Respect to props every function is pure.

//Pure function rule A in react.
import ReactDOM from 'react-dom/client';

//Every component is is based on pure function with respect to "props"
const Welcome = props => {
    //side effects : props are read only
   // props.message = 'foo'
    return <div>
        <h1>{props.message}</h1>
    </div>
}

const App = () => {
    return <>
        <Welcome message="hello" />
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />
);
.....................................................................................
				Pure Function Rule B
....................................................................................

Rule B:
.......
 if function receives input, what if i want to change(mutate),We can apply rule b.
 
if function receives input,and modify input , we should return new object every time, which is called immutablity. 


//pure function Rule B


function updateProfile(city, profile) {
    //update profile city 
    profile.city = city
 
    return profile
}

let profile = {
    name: 'Subramanian',
    city: 'Coimbatore'
}

console.log('before update', profile)
const result = updateProfile('Chennai', profile)
console.log(profile === result ? "Same Object" : "Different Object")
console.log('after update', result)

Result:
before update {name: 'Subramanian', city: 'Coimbatore'}
index.js:18 Same Object
index.js:19 after update {name: 'Subramanian', city: 'Chennai'}

The above code is pure or not?

The above is not pure, it is impure.

 "I need to mutate state(data), but at the same time, i need purity"
			
	                  Apply Immutablity Principle


What is immutability?

  When ever you update the data(object), you have to create new object every time.

In order to write immutable code, js supports many patterns

1. Plain js pattern.
//pure function Rule B

function updateProfile(city, profile) {
    //return new object
    return {
        name: profile.name,
        city: city
    }
}

let profile = {
    name: 'Subramanian',
    city: 'Coimbatore'
}

console.log('before update', profile)
const result = updateProfile('Chennai', profile)
console.log(profile === result ? "Same Object" : "Different Object")
console.log('after update', result)

Plain js pattern has some drawback, we have to copy all the properties manually...

2.Object.assign pattern
//pure function Rule B

function updateProfile(city, profile) {
    //Object.assign 
    return Object.assign({}, profile, { city: city })
}

let profile = {
    name: 'Subramanian',
    city: 'Coimbatore'
}

console.log('before update', profile)
const result = updateProfile('Chennai', profile)
console.log(profile === result ? "Same Object" : "Different Object")
console.log('after update', result)

3.ES 7 Spread operator 
//pure function Rule B

function updateProfile(city, profile) {
      return { ...profile, city }
}

let profile = {
    name: 'Subramanian',
    city: 'Coimbatore'
}

console.log('before update', profile)
const result = updateProfile('Chennai', profile)
console.log(profile === result ? "Same Object" : "Different Object")
console.log('after update', result)
.....................................................................................
			Arrays -Pure functions (immutablity)
.....................................................................................

Array pure functions:

1.map
  map is pure function , which returns new array when you iterate.

2.filter
  filter is also function, which returns new array when you iterate.

map:


function transform(data) {

    return data.map(item => item)
}

let list = ['subramanian', 'ram', 'murugan']

const response = transform(list)

console.log(list === response ? "Same" : "Different")

filter:


function filter(data) {

    return data.filter(item => item.status === true)
}

let employees = [{
    id: 1,
    name: 'subramanian',
    status: true
},
{
    id: 2,
    name: 'Ram',
    status: false
},
{
    id: 3,
    name: 'Karthik',
    status: true
},
{
    id: 4,
    name: 'Murugan',
    status: false
}

]

const response = filter(employees)

console.log(employees === response ? "Same" : "Different")
.....................................................................................

Add Item:

push


//is it pure or not
function add(todos, todo) {
    return todos.push(todo)
}
let todos = [{
    title: 'Learn react',
    done: true
}];

//Testing 
Object.freeze(todos)

console.log(add(todos, { title: 'Learn Microservices', done: false }));


Response:
Uncaught TypeError: Cannot add property 1, object is not extensible

You are trying to add  on exiting memory... which is not pure and immutable...

so "array.push" is not pure function.

How to add item into array with purity:

Solution:

1.concat
   it is pure and immutable method..

//is it pure or not
function add(todos, todo) {
   // return todos.push(todo)
   return todos.concat(todo)
}
let todos = [{
    title: 'Learn react',
    done: true
}];

//Testing 
Object.freeze(todos)

console.log(add(todos, { title: 'Learn Microservices', done: false }));

2.Using spread operator

//is it pure or not
function add(todos, todo) {
    // return todos.push(todo)
    //  return todos.concat(todo)
    return [...todos, todo]
}
let todos = [{
    title: 'Learn react',
    done: true
}];

//Testing 
Object.freeze(todos)

console.log(add(todos, { title: 'Learn Microservices', done: false }));
....................................................................................
			 React state mutation and pure functions
.....................................................................................

this.setState()
  pure function which returns immutable object always..

syntax:
 this.setState(function(state,props){
     //return immutable object
    return {} / object.assign / spread notation
 })
.....................................................................................

State Tracking:

 Previous State and Current State...

import React from 'react';
import ReactDOM from 'react-dom/client';


class Review extends React.Component {

    //state declaration
    state = {
        //application data/ui data
        like: 10
    }
    //listener: arrow function
    onLike = () => {
        //react offers the pure function through which only we have to update u
        // this.setState(function (previousState) {
        //     // return {
        //     //     like: previousState.like + 1
        //     // }
        //     // return Object.assign({}, previousState, { like: previousState.like + 1 })
        //     return { ...previousState, like: previousState.like + 1 }
        // })
        // this.setState(previousState => ({ ...previousState, like: previousState.like + 1 }))

        this.setState(function (previousState) {
            console.log('Previous State ',previousState)
            return { ...previousState, like: previousState.like + 1 }
        })
    }
    render() {
        console.log('current state', this.state)
        return <div>
            <h1>Review Component</h1>
            <h5>Like {this.state.like}</h5>
            <button onClick={this.onLike}>😁</button>
        </div>
    }
}


const App = () => {
    return <>
        <Review></Review>
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />
);
.....................................................................................
			Multiple State and Inline Event Listener
.....................................................................................

Note :
 if want to more state variables, that has to be enclosed within single object only

 state = {
  ....
 }
import React from 'react';
import ReactDOM from 'react-dom/client';

class Review extends React.Component {

    state = {
        like: 10,
        dislike: 10
    }
    onLike = () => {
        this.setState(function (previousState) {
            console.log('Previous State ', previousState)
            return { ...previousState, like: previousState.like + 1 }
        })
    }
    render() {
        console.log('current state', this.state)
        return <div>
            <h1>Review Component</h1>
            <h5>Like {this.state.like} Dislike {this.state.dislike}</h5>
            <button onClick={this.onLike}>😁</button>
            {/* Inline listener */}
            <button onClick={() => {
                this.setState(function (previousState) {
                    console.log('Previous State ', previousState)
                    return { ...previousState, dislike: previousState.dislike + 1 }
                })
            }}>😫</button>

        </div>
    }
}


const App = () => {
    return <>
        <Review></Review>
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />
);
.....................................................................................
			   
state= {
   house:{
     name:'RavenClaw',
     points:10
   }
}
I need to increase the points By two..

import React from 'react';
import ReactDOM from 'react-dom/client';

class HouseRating extends React.Component {

    state = {
        house: {
            name: 'RavenClaw',
            points: 10
        }
    }

    onIncreasePointByTwo = () => {
        this.setState((prevState) => {
            return {
                ...prevState, //level -0 copy
                house: {
                    ...prevState.house, // level-1 copy
                    points: prevState.house.points + 2
                }
            }
        })
    }

    render() {
        return <div>
            <h1>House Rating Component</h1>
            <h1>House Name {this.state.house.name}</h1>
            <h5>Points : {this.state.house.points}</h5>
            <button onClick={this.onIncreasePointByTwo}>😁</button>


        </div>
    }
}


const App = () => {
    return <>
        <HouseRating />
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />
);
.....................................................................................
				Deep Nesting
.....................................................................................

Assigment:
state = {
  customer: {
    id:1,
    name:'Subramanian'
    contact: {
	address: {
	    city:'Chennai'
	},
	communcation:{ 
           mobileNo:'9000000'
	}
    }
  }

}

How to update mobileNo - 834343434
.....................................................................................
			 Complxity of Immutable Objects 
				 and 
			    How to solve  them
				immer.js
.....................................................................................
What is immer?
  immer is simple js lib, which helps to write complex immutable code in "mutable way" like regular javascript way.

immutable syntax to update object property:


    state = {
        house: {
            name: 'RavenClaw',
            points: 10
        }
    }


 	return {
                ...prevState, //level -0 copy
                house: {
                    ...prevState.house, // level-1 copy
                    points: prevState.house.points + 2
                }
        }

js syntax:

    state = {
        house: {
            name: 'RavenClaw',
            points: 10
        }
    }

update state:

state.house.points +=2

immer is lib which takes care of writing mutable code on behalf of us, developer writes mutable code, immer converts into immutable code.

Immer core concept:

immer provides a function called "produce"

produce(state,(draft)=>{
  draft.house.points +=2
})

Getting started:

steps:
1.install immer lib
npm i immer

import React from 'react';
import ReactDOM from 'react-dom/client';
import { produce } from 'immer';

class HouseRating extends React.Component {

    state = {
        house: {
            name: 'RavenClaw',
            points: 10
        }
    }

    onIncreasePointByTwo = () => {
        this.setState((prevState) => {
            return produce(prevState, (draft) => {
                draft.house.points += 2
            })
        })
    }

    render() {
        return <div>
            <h1>House Rating Component</h1>
            <h1>House Name {this.state.house.name}</h1>
            <h5>Points : {this.state.house.points}</h5>
            <button onClick={this.onIncreasePointByTwo}>😁</button>


        </div>
    }
}


const App = () => {
    return <>
        <HouseRating />
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />
);
....................................................................................
			Dynamic props
		       (State as Prop)


As of now, we have seen how to have state,biz logic, user interface inside single component, which is not recommended pratice.

we have to isloate state and biz logic, user interface into separate components.

According to this idea, components can be classified into two category

1.Container Component
   Component having state + biz logic
2.Presentational Component
   Component having UI 

How to pass data(state) from parent to child?
  As a prop, dynamic prop...

import { produce } from 'immer';
import React from 'react';
import ReactDOM from 'react-dom/client';


//Container Component
class Review extends React.Component {
    //state declaration
    state = {
        like: 10
    }
    onLike = () => {
        this.setState(previousState => {
            return produce(previousState, (draft) => {
                draft.like += 1
            })
        })
    }
    render() {
        console.log('current state', this.state)
        return <div>
            {/* State as prop and listener as prop */}
            {/* <ReviewDisplay like={this.state.like} onLike={this.onLike} /> */}
            <ReviewDisplay  {...this.state} onLike={this.onLike} />

        </div>
    }
}

//Re
const ReviewDisplay = props => {
    return <>
        <h1>Review Component</h1>
        <h5>Like {props.like}</h5>
        <button onClick={props.onLike}>😁</button>
    </>
}


const App = () => {
    return <>
        <Review></Review>
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />
);

import { produce } from 'immer';
import React from 'react';
import ReactDOM from 'react-dom/client';


//Container Component
class Review extends React.Component {
    //state declaration
    state = {
        like: 10
    }
    onLike = () => {
        this.setState(previousState => {
            return produce(previousState, (draft) => {
                draft.like += 1
            })
        })
    }
    render() {
        console.log('current state', this.state)
        return <div>
            {/* State as prop and listener as prop */}
            {/* <ReviewDisplay like={this.state.like} onLike={this.onLike} /> */}
            <ReviewDisplay  {...this} onLike={this.onLike} />

        </div>
    }
}

//Re
const ReviewDisplay = props => {
    return <>
        <h1>Review Component</h1>
        <h5>Like {props.like}</h5>
        <button onClick={props.onLike}>😁</button>
    </>
}


const App = () => {
    return <>
        <Review></Review>
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />
);
.....................................................................................
			 Component Life cycles
.....................................................................................

React Component life cycle can be classified into three major phases

1.Mount

2.Update

3.UnMount

1.Mount :
  Incase of class component

 1.constructor
      Called only once in the component initalization
     constructors are not used very much...
 2.render
    Called for creating object tree-component tree-Virtual DOM

 3.componentDidMount
    Called after render method, once the dom is ready- once ui is completed loaded
    This method is used heavily  used in react all versions
   It is used to inital data fetching from the apis
   It is used to write any async task
   It is used to write websocket connections


2.Update
    When user starts interacting
   when state is mutated  -setState,forceUpdate
   when new props are supplied -state as prop
  
   render
      method is called after state mutation, in order to update ui with new state/
   during render call,it creates vdom, apply an algorthim called "diff", to compute    old tree and new tree, update dom accordingly.
  
   componentDidUpdate
     It is method which is called after render is completed in update cycle.
    incase if you want fetch data from api after dom updates
    incase if you want to any async tasks.
    
3.UnMount
  When component is removed from memory
 ComponentWillunMount
   any resource clean up task...

import { produce } from 'immer';
import React from 'react';
import ReactDOM from 'react-dom/client';


class Counter extends React.Component {
    state = {
        value: 0
    }
    constructor() {
        super()
        console.log('constrcutor is called')
    }
    //render
    render() {
        console.log('render is called')
        return <>
            <h1>Counter {this.state.value} </h1>
            <button onClick={() => {
                this.setState(previousState => produce(previousState, (draft) => {
                    draft.value += 1
                }))
            }}>+</button>
        </>
    }
    componentDidMount() {
        console.log('ComponentDidMount')
    }
    componentDidUpdate() {
        console.log('ComponentDidUpdate')
    }
}



const App = () => {
    return <>
        <Counter></Counter>
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />
);
...................................................................................
			Component Lifes and API Call
...................................................................................

In order to talk to REST API, react has no any opinion regarding which ajax libs should be used

Popular ajax libs used inside react

1.fetch
2.axios

import { produce } from 'immer';
import React from 'react';
import ReactDOM from 'react-dom/client';


class Posts extends React.Component {
    state = {
        posts: [], //data
        error: null,
        isLoading: false
    }

    //render
    render() {
        const { posts, error, isLoading } = this.state
        if (error) {
            return <div style={{ marginLeft: 50 }}>
                <h1>Error : {error.message}</h1>
            </div>
        } else if (!isLoading) {
            return <h1 style={{ textAlign: 'center' }}>🛴</h1>
        } else {
            return <div style={{ marginLeft: 50 }}>
                <h1>Posts</h1>
                <hr />
                <ul>
                    {posts.map(post => {
                        return <li>{post.title}</li>
                    })}
                </ul>
            </div>

        }
    }
    async componentDidMount() {
        const url = 'https://jsonplaceholder.typicode.com/posts'
        try {
            const response = await fetch(url)
            const posts = await response.json()
            console.log(posts)
            this.setState(previousState => {
                return produce(previousState, draft => {
                    draft.posts = posts
                    draft.isLoading = true
                    draft.error = previousState.error
                })
            })
        }
        catch (err) {
            this.setState(previousState => {
                return produce(previousState, draft => {
                    draft.error = err
                })
            })
        }

    }

}



const App = () => {
    return <>
        <Posts></Posts>
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);
.....................................................................................
				Hooks
....................................................................................

Hooks are simple javascript function which holds Component's logic outside component.
Incase of class component , if you define a biz logic, the similar logic if you have in another component, we can't reuse.

React 16 introduced a feature called hooks, by using hooks you can eleminate class components completly, by keeping functional components

Hooks abstract complex  biz logic in reusable mannager.

React provides lot of built in hooks to build app , as simple as possible , mean time you can create your own hooks (custom hooks).

Hooks features:

1.hook is simple js function
2.hook can take input and also return values
3.every hook function starts with "useHookName"

Common Built in Hooks

1.useState
   To declare state and mutation inside functions
2.useEffect
   It represents "Life Methods" - compoentDidMount,componentDidUpdate
3.useContext
4.useRef
5.useMemo
6.useCallback
etc......

Thanks class components,goodbye to class components....

State declaration,mutation:
...........................

useState:

Syntax:

const [state,setState]=useState(initalState)

state is just variable it could be any thing
setState -  pure function its name generally setVariableName

const [counter,setCounter]=useState(initalState)

initalState could be

1.primitive values numbers,string,boolean
2.objects
3.arrays

const [counter,setCounter]=useState(0)
const [state,setState]=useState('hello')
const [state,setState]=useState(false)
const [state,setState]=useState(null)
const [state,setState]=useState({count:0})
const [state,setState]=useState([])


Basic Example: single state:
import React, { useState } from 'react';
import ReactDOM from 'react-dom/client';

function Review() {
    //state declaration
    const [like, setLike] = useState(0)
    //listener 
    const onLike = () => {
        //logic
        // setLike((prevState) => {
        //     return prevState + 1
        // })
        //short cut
        // setLike((prevState) => prevState + 1)
        setLike(like + 1)

    }
    return <div>
        <h1>Review App</h1>
        <h3>Like {like}</h3>
        {/* <button onClick={onLike}>Like</button> */}
        <button onClick={() => setLike(like + 1)}>Like</button>
    </div>
}

const App = () => {
    return <>
        <Review />
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);
....................................................................................

Multi State:
import React, { useState } from 'react';
import ReactDOM from 'react-dom/client';

const Review = () => {
    const [like, setLike] = useState(0)
    const [dislike, setDislike] = useState(0)
    return <div>
        <h1>Review App</h1>
        <h3>Like {like} DisLike {dislike}</h3>
        <button onClick={() => setLike(like + 1)}>Like</button>
        <button onClick={() => setDislike(like + 1)}>DisLike</button>
    </div>
}

const App = () => {
    return <>
        <Review />
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);
....................................................................................

Objects and Hooks using immer:
..............................
import { produce } from 'immer';
import React, { useState } from 'react';
import ReactDOM from 'react-dom/client';

const Review = () => {
    const [review, setReview] = useState({ like: 0, dislike: 0 })
    const onLike = () => {
        // setReview(prevState => {
        //     //return { ...prevState, like: prevState.like + 1 }
        //     return produce(prevState, (draft) => {
        //         draft.like += 1
        //     })
        // })
        setReview(prevState => produce(prevState, (draft) => {
            draft.like += 1
        }))
    }
    return <div>
        <h1>Review App</h1>
        <h3>Like {review.like} DisLike {review.dislike}</h3>
        <button onClick={onLike}>Like</button>
    </div>
}

const App = () => {
    return <>
        <Review />
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);


Assigment:
 Convert existing houseRating component into hooks powered component.
.....................................................................................
			 Life Cycle callbacks and hooks
.....................................................................................

comonentDidMount,componentDidupdate,componentWillUnMount
    =>useEffect


componentDidMount

import { produce } from 'immer';
import React, { useEffect, useState } from 'react';
import ReactDOM from 'react-dom/client';

const Review = () => {
    const [like, setLike] = useState(0)

    //Life cycle methods
    useEffect(() => {
        //you can write any async code 
        setTimeout(() => {
            setLike(like + 10)
        }, 5000)
    }, [])

    return <div>
        <h1>Like {like}</h1>
        <button onClick={() => {
            setLike(like + 1)
        }}>+</button>
    </div>
}

const App = () => {
    return <>
        <Review />
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);

componentDidUpdate:
...................
import { produce } from 'immer';
import React, { useEffect, useState } from 'react';
import ReactDOM from 'react-dom/client';

const Review = () => {
    const [like, setLike] = useState(0)
    const [initialRender, setInitalRender] = useState(true);

    //Life cycle methods
    useEffect(() => {
        if (initialRender) {
            setInitalRender(false)
        } else {
            console.log('update')
        }
    }, [like])

    return <div>
        <h1>Like {like}</h1>
        <button onClick={() => {
            setLike(like + 1)
        }}>+</button>
    </div>
}

const App = () => {
    return <>
        <Review />
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);

.............
componentwillUnMount:

import { produce } from 'immer';
import React, { useEffect, useState } from 'react';
import ReactDOM from 'react-dom/client';

const Review = () => {
    const [like, setLike] = useState(0)
    const [initialRender, setInitalRender] = useState(true);

    //Life cycle methods
    useEffect(() => {
        if (initialRender) {
            setInitalRender(false)
        } else {
            console.log('update')
        }

        return () => {
            //componentwillUnMount will go
            
        }

    }, [like])

    return <div>
        <h1>Like {like}</h1>
        <button onClick={() => {
            setLike(like + 1)
        }}>+</button>
    </div>
}

const App = () => {
    return <>
        <Review />
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);
....................................................................................
			 API Calls in useEffect
....................................................................................
import { produce } from 'immer';
import React, { useEffect, useState } from 'react';
import ReactDOM from 'react-dom/client';

const Posts = () => {
    const [post, setPost] = useState({
        posts: [], //data
        error: null,
        isLoading: false
    })
    async function fetchPosts() {
        const url = 'https://jsonplaceholder.typicode.com/posts'
        try {
            const response = await fetch(url)
            const posts = await response.json()
            console.log(posts)
            setPost(previousState => {
                return produce(previousState, draft => {
                    draft.posts = posts
                    draft.isLoading = true
                    draft.error = previousState.error
                })
            })
        }
        catch (err) {
            setPost(previousState => {
                return produce(previousState, draft => {
                    draft.error = err
                })
            })
        }
    }

    useEffect(() => {
        fetchPosts()
    }, [])

    if (post.error) {
        return <div style={{ marginLeft: 50 }}>
            <h1>Error : {post.error.message}</h1>
        </div>
    } else if (!post.isLoading) {
        return <h1 style={{ textAlign: 'center' }}>🛴</h1>
    } else {
        return <div style={{ marginLeft: 50 }}>
            <h1>Posts</h1>
            <hr />
            <ul>
                {post.posts.map(post => {
                    return <li>{post.title}</li>
                })}
            </ul>
        </div>

    }
}

const App = () => {
    return <>
        <Posts />
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);
....................................................................................
			  Input from the user
....................................................................................
import React, { useState } from 'react';
import ReactDOM from 'react-dom/client';


const MyInput = props => {
    const [text, setText] = useState('Subramaian')
    const [liked, setLiked] = useState(true)

    const handleChange = (evt) => {
        setText(evt.target.value)
    }
    return <>
        <input value={text} onChange={handleChange} />
        <h1>Your Name : {text}</h1>
        <div>
            <input type="checkbox" checked={liked} onChange={(e) => {
                setLiked(e.target.checked)
            }} />
            Do you like
            <p>you {liked ? 'liked this' : ' did not like this'}</p>
        </div>
    </>
}


const App = () => {
    return <>
        <MyInput />
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);
.....................................................................................
			 Custom Hooks
.....................................................................................

Why Custom Hooks?

 if you want to create resuable functions to be used across your application/team/company.


Use Case: Calculating window width

import { useEffect, useState } from 'react';
import ReactDOM from 'react-dom/client';


const Frame = props => {

    const [width, setWidth] = useState(window.innerWidth)

    useEffect(() => {
        const handleResize = () => setWidth(window.innerWidth)
        //window listner:
        window.addEventListener('resize', handleResize)
        //unMount
        return () => {
            window.removeEventListener('resize', handleResize)
        }

    })

    return <>
        <h1>Frame</h1>
        <h1>Width: {width}</h1>
    </>
}


const Panel = props => {

    const [width, setWidth] = useState(window.innerWidth)

    useEffect(() => {
        const handleResize = () => setWidth(window.innerWidth)
        //window listner:
        window.addEventListener('resize', handleResize)
        //unMount
        return () => {
            window.removeEventListener('resize', handleResize)
        }

    })

    return <>
        <h1>Panel</h1>
        <h1>Width: {width}</h1>
    </>
}


const App = () => {
    return <>
        <Panel />
        <hr></hr>
        <Frame/>
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);

Now calculating Window width is available in  Panel comompoent and also in side Framework, code is duplicated...


Having features does not belong to within component, we have to move out of component.

1.Feature
    screenSize

src/hooks/useWindowWidth.js
import { useEffect, useState } from 'react';

//Every hooks is just js function.

function useWindowWidth() {
    const [width, setWidth] = useState(window.innerWidth)
    useEffect(() => {
        const handleResize = () => setWidth(window.innerWidth)
        //window listner:
        window.addEventListener('resize', handleResize)
        //unMount
        return () => {
            window.removeEventListener('resize', handleResize)
        }

    })
    return width;

}
export { useWindowWidth }

src/index.js

import { useEffect, useState } from 'react';
import ReactDOM from 'react-dom/client';
import { useWindowWidth } from './hooks/useWindowWidth';

const Frame = props => {
    const width = useWindowWidth()
    return <>
        <h1>Frame</h1>
        <h1>Width: {width}</h1>
    </>
}


const Panel = props => {
    const width = useWindowWidth()

    return <>
        <h1>Panel</h1>
        <h1>Width: {width}</h1>
    </>
}


const App = () => {
    return <>
        <Panel />
        <hr></hr>
        <Frame />
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);

.....................................................................................
Task:
 To fetch data from api, instead of writing fetch code inside component, why cant  i have common hook, which should return object {data,error,isLoading}

const {data,error,isLoading} = useFetch('url')
.....................................................................................
			Component as Prop
.....................................................................................

Component Rendering:

<Row></Row> or <Row/>

<Row>
  <h1>Hello</h1>
</Row>
<Row>
  <Column>
</Row>

<App>
	<Layout>
		<Page>

		</Page>
	</Layout>
</App>

import { useEffect, useState } from 'react';
import ReactDOM from 'react-dom/client';

// function AlertButton(props) {
//     return <button>
//             {props.children}
//     </button>
// }
function AlertButton({ children }) {
    return <button>
        {children}
    </button>
}
function Frame({ children }) {

    return <div style={{ backgroundColor: 'yellow', padding: 10, width: 200 }}>
        {children}
    </div>
}

function Link({ children, path }) {

    return <a href={path}>{children}</a>
}


const App = () => {
    return <>

        <Frame>
            <AlertButton>
                PlayMovie
            </AlertButton>
            <AlertButton>
                uploadImage
            </AlertButton>
            <Link path="http://www.google.com">
                google
            </Link>
            <Link path="http://www.facebook.com">
                facebook
            </Link>
        </Frame>
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);

Task:

YOu have build Grid Component where as you have create, Row,Column,Grid Component
Pass data as prop and Pass Row ,Column as Prop to Grid

<Grid>
   <Row>
	<Column></Column>
   </Row>
   <Row></Row>
   <Row></Row>
</Grid>
























